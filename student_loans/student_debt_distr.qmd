---
title: "Student Loan Data"
format:
  html:
    embed-resources: true
execute: 
  echo: false
  warning: false
fig-cap-location: top
toc: true
toc-expand: true

---

```{r}

library(tidyverse)
library(tidyquant)
library(plotly)

library(urbnthemes)
set_urbn_defaults(style = "print", 
                  base_size=11,
                  base_line_size = 1.5
                  )

ggplot2::theme_update(
    panel.grid.major.x = element_line(color = "grey",
                                size = 0.2,
                                linetype = 1),
    panel.grid.minor.x = element_line(color = "grey",
                                size = 0.2,
                                linetype = 2),
    line = element_line(colour = "#000000",
                                 size = 1,
                                 linetype = 1L,
                                 lineend = "butt"),
    )
```



```{r}
#| label: load-data

source("make_student_loan_data.R")

# Read shares with debt
shares_df = read_shares(fname_shares)

# Read amounts of debt
amt_df = read_amounts()


```



```{r}
#| label: make-samples

make_debt_sample = function(df)
{

    s = list()
    valmin = 0
    valmax = 6e4
    
    for( j in 1:dim(df)[1] ) {
    
        # 1. Get probabilities
        r1 = df[j,]
        p1 = r1 |> select(starts_with('p'))
        pctiles = c(0, as.integer(gsub('^p', '', names(p1))), 100)
        probs=pctiles/100
        quants= c(valmin, as.numeric(p1), valmax)
        lens=diff(pctiles)
        len_x=10
        
        # 2. Create a sample
        s1 = unlist(c(
            quants[1],
            map(
                2:length(quants),
                function(i) {
                    (seq(
                        quants[i-1],
                        quants[i],
                        length.out=(lens[i-1] * len_x)+1
                        ))[-1]
                    }
                )
            ))
        
        # 3. Create a list entry
        s[[length(s)+1]] = list(
            race     = pull(r1[1,"race"]),
            sex      = pull(r1[1,"gender"]),
            taxstat  = pull(r1[1,"taxstatus"]),
            educ     = pull(r1[1,"educ"]),
            data     = s1
            )
    }
    
    resdf = bind_rows(map(s, ~tibble(
            race    = .x$race, 
            sex     = .x$sex, 
            debt    = .x$data,
            taxstat = .x$taxstat,
            educ    = .x$educ
            )
        )
    )
    return(resdf)
}
```


# Imputing a Distribution of Student Loan Debt

To simulate student-loan debt in DYNASIM, it is necessary to have a distribution of that debt. The available data contains several percentiles of student-loan debt and we use them to impute a full distribution of debt.

We obtained data on direct subsidized and unsubsidized student loans from the National Center for Educational Statistics. The data includes 10th, 25th, 50th, 75th, and 90th percentiles of debt borrowed for undergraduate education through 2017 by race/ethnicity, gender, and educational attainment in 2017. For dependent students, data is also disaggregated by parents' income in 2012.

To impute a full distribution, we generate a sequence of debt values between each two subsequent percentiles available in data. Each sequence's length is proportional to the number of "missing" percentiles. For example, this process might generate 14 values between 10th and 25th percentiles and 24 values between 25th and 50th percentiles. If a larger sample is necessary, these numbers could be multiplied by some factor. Each sequence is generated as an arithmetic progression with the first percentile as its start value and the second percentile as its end value. 

::: {.callout-note}
We assume that the minimum value of a loan is zero and maximum value is $60,000. Is this right?
:::


```{r}
#| label: make-plotdf1

plotdf = amt_df |> 
    filter(race %in% c("Black", "Hispanic", "White"), gender == "Total") |>
    make_debt_sample()
```

```{r}
#| label: fig-debtamt-by-race-stat-educ
#| fig-cap: "Imputed distribution of student debt by race, tax status, and educational attainment." 
plotdf |>
    ggplot(aes(debt, color=taxstat)) +
    stat_ecdf() +
    facet_grid(rows=vars(educ), cols=vars(race)) +
    scale_x_continuous(labels=function(x) return(x/1000) ) +
    scale_y_continuous(labels=function(x) return(x*100) ) +
    xlab("Debt ($1000)") + ylab("ECDF (%)")


```

```{r}
#| label: make-plotdf2

plotdf = amt_df |> 
    filter(race %in% c("Black", "Hispanic", "White"), gender %in% c("Male", "Female")) |>
    make_debt_sample()
```

```{r}
#| label: fig-debtamt-by-race-educ-sex-deps
#| fig-cap: "Imputed distribution of student debt for dependent students by race, sex, and educational attainment." 
plotdf |>
    filter(taxstat=="Dependent") |>
    ggplot(aes(debt, color=sex)) +
    stat_ecdf() +
    facet_grid(rows=vars(educ), cols=vars(race)) +
    scale_x_continuous(labels=function(x) return(x/1000) ) +
    scale_y_continuous(labels=function(x) return(x*100) ) +
    xlab("Debt ($1000)") + ylab("ECDF (%)")


```
```{r}
#| label: fig-debtamt-by-race-educ-sex-indeps
#| fig-cap: "Imputed distribution of student debt for independent students by race, sex, and educational attainment." 
plotdf |>
    filter(taxstat=="Independent") |>
    ggplot(aes(debt, color=sex)) +
    stat_ecdf() +
    facet_grid(rows=vars(educ), cols=vars(race)) +
    scale_x_continuous(labels=function(x) return(x/1000) ) +
    scale_y_continuous(labels=function(x) return(x*100) ) +
    xlab("Debt ($1000)") + ylab("ECDF (%)")


```
