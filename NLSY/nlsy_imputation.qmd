---
title: "NLSY Parent Income and Wealth Imputation"
format:
  html:
    embed-resources: true
editor: visual
execute: 
  echo: false
  warning: false
fig-cap-location: top
toc: true
toc-expand: true
---

# Data Summary

```{r}
#Packages
librarian::shelf(dplyr, mice, car, corrplot, caret, tidyr, modelsummary, VIM)

source(here::here("NLSY/nlsy_lib.R"))

```

```{r}

basedf = nlsy_get_base_df()

# Making dummy or factor variables
test <- basedf |>
    mutate(
        mom_educ_hs = nlsy_encode_educ5(mom_res_ed, factorize=TRUE),
        dad_educ_hs = nlsy_encode_educ5(dad_res_ed, factorize=TRUE),
        race_eth = nlsy_recode_race_and_eth10(race, hisp),
        race_eth = factor(race_eth),
        race = factor(race),
        hisp = factor(hisp),
        par_dec = ifelse(par1_deceased == "Yes" | par2_deceased == "Yes", 1, 0) # Either parent deceased
    ) |>
    filter(!is.na(race_eth))
    
```

```{r}
#| label: tbl-data-summary-contvar
#| tbl-cap: "Data summary, continuous variables"

test |>
  select(age_resp, bdate_y, pincome, pnetworth, retsav1, mom_age_birth, 
         mom_age, has_retsav, owns_home, both_parents) |>
  datasummary_skim()
```

```{r}
#| label: tbl-data-summary-catvar
#| tbl-cap: "Data summary, categorical variables"

test |>
  select(mom_educ_hs, dad_educ_hs, race_eth) |>
  datasummary_skim(type="categorical")

```

# Imputation of Parental Income and Networth

## Choices

From `mice` package documentation:

1.  First, we should decide whether the missing at random (MAR) assumption (Rubin 1976) is plausible. The MAR assumption is a suitable starting point in many practical cases, but there are also cases where the assumption is suspect. Schafer (1997, pp. 20--23) provides a good set of practical examples. MICE can handle both MAR and missing not at random (MNAR). Multiple imputation under MNAR requires additional modeling assumptions that influence the generated imputations. There are many ways to do this. We refer to Section 6.2 for an example of how that could be realized.
2.  The second choice refers to the form of the imputation model. The form encompasses both the structural part and the assumed error distribution. Within MICE the form needs to be specified for each incomplete column in the data. The choice will be steered by the scale of the dependent variable (i.e., the variable to be imputed), and preferably incorporates knowledge about the relation between the variables. Section 3.2 describes the possibilities within mice 2.9.
3.  Our third choice concerns the set of variables to include as predictors into the imputation model. The general advice is to include as many relevant variables as possible including their interactions (Collins et al. 2001). This may however lead to unwieldy model specifications that could easily get out of hand. Section 3.3 describes the facilities within mice 2.9 for selecting the predictor set.
4.  The fourth choice is whether we should impute variables that are functions of other (incomplete) variables. Many data sets contain transformed variables, sum scores, interaction variables, ratios, and so on. It can be useful to incorporate the transformed variables into the multiple imputation algorithm. Section 3.4 describes how mice 2.9 deals with this situation using passive imputation.
5.  The fifth choice concerns the order in which variables should be imputed. Several strategies are possible, each with their respective pro's and cons. Section 3.6 shows how the visitation scheme of the MICE algorithm within mice 2.9 is under control of the user
6.  The sixth choice concerns the setup of the starting imputations and the number of iterations. The convergence of the MICE algorithm can be monitored in many ways. Section 4.3 outlines some techniques in mice 2.9 that assist in this task.
7.  The seventh choice is m, the number of multiply imputed data sets. Setting m too low may result in large simulation error, especially if the fraction of missing information is high.

## Significance of Predictors

```{r}
#| label: tbl-reg-pincome
#| tbl-cap: "Regression of pincome to examine significance of predictors"

# Looking for significance with non-missing income and wealth
non_missing <- test %>%
    filter(!is.na(pincome),
           !is.na(pnetworth))

m1 = lm(pincome ~ mom_age + race_eth + mom_educ_hs + dad_educ_hs + 
    has_retsav + owns_home + both_parents + par_dec, 
    data = non_missing)

m2 = lm(pnetworth ~ mom_age + race_eth + mom_educ_hs + dad_educ_hs + 
    has_retsav + owns_home + both_parents + par_dec, 
    data = non_missing)

modelsummary(list('pincome'=m1, 'pnetworth'=m2),
             estimate="{estimate}{stars}", 
             statistic=NULL,
             stars=c('*'=.1, '**'=.05, '***'=.01)
             )
#Non-significant: par_dec - dropping for now
```

### Checking for multi-collinearity - correlation plot for numeric variables

```{r}

testing_cor <- test |>
    select(age_resp, mom_age, has_retsav, owns_home, both_parents) |>
    drop_na()

M <- cor(testing_cor)
cor(testing_cor)
corrplot(M, type = "upper")
```

### Checking for multi-collinearity - VIF and Successive addition of regressors

```{r}
#| eval: false

summary(model <- lm(pincome ~ mom_age, data = test)) #Adj R2 = 0.057
summary(model <- lm(pincome ~ mom_age + hisp, data = test)) #Adj R2 = 0.09
car::vif(model)
summary(model <- lm(pincome ~ mom_age + hisp + race, data = test)) # #Adj R2 = 0.157
car::vif(model)

summary(model <- lm(pincome ~ mom_age + hisp + race + mom_educ_hs, data = test)) #Adj R2 = 0.1899
car::vif(model)

summary(model <- lm(pincome ~ mom_age + hisp + race + mom_educ_hs + dad_educ_hs, data = test)) #Adj R2 = 0.1616
car::vif(model)

summary(model <- lm(pincome ~ mom_age + hisp + race + mom_educ_hs + dad_educ_hs + has_retsav, data = test)) #Adj R2 = 0.199
car::vif(model)

summary(model <- lm(pincome ~ mom_age + hisp + race + mom_educ_hs + dad_educ_hs + has_retsav + owns_home, data = test)) #Adj R2 = 0.2107
car::vif(model)

summary(model <- lm(pincome ~ mom_age + hisp + race + mom_educ_hs + dad_educ_hs + has_retsav + owns_home + both_parents, data = test)) #Adj R2 = 0.2108
car::vif(model)
```

## Checking for missings in the predictor variables

```{r}

impute <- test |>
    select(
        id, pincome, pnetworth, mom_age, mom_educ_hs, dad_educ_hs, 
        race_eth, has_retsav, owns_home, both_parents
    )

# no variables are found to have near zero variance
t <- nearZeroVar(impute) 

# dad_educ_hs has 3433 missings
sapply(impute, function(x) sum(is.na(x))) 

# Calculating percent of usable cases
m <- md.pairs(impute)

# looking for low proportions: where both target and predictor are missing on the same cases
# Note: For row target pincome and pnetworth respectively, predictors dad_educ_hs, has_retsav, 
# and owns_home have lowest proportions
round(m$mr/(m$mr + m$mm), 3) 


```

## Checking for MCAR

The two pairs of boxplots on the edges of @fig-margplot-pincome-pnetworth show distributions of pincome and pwealth when the other variable is present and when it's missing. Variable pnetworth has somewhat lower mean in the subsample where pincome is missing than in the subsample where pincome is present. The distribution of pincome in the subsample where pnetworth is missing is shifted upward relative to its distribution in the subsample where pnetworth is present. In each case, these distributions are relatively similar, and the MCAR assumption is not implausible.

```{r}
#| label: fig-margplot-pincome-pnetworth
#| fig-cap: "Marginal plot for parental income and wealth"

marginplot(
  test[,c("pincome", "pnetworth")],
  col=mdc(1:2),
  xlab="pincome", 
  ylab="pnetworth")
```

## Multiple Imputation of Parental Income and Networth

```{r}
#| label: impute-init
#| output: false

# Paper that uses multiple imputation: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6049093/
# Multiple imputation in R reference: https://library.virginia.edu/data/articles/getting-started-with-multiple-imputation-in-r

number_of_imputations = 5

init = mice(impute, maxit=0)
meth = init$method
predM = init$predictorMatrix

# Assign Variables to be imputed
# Don't use id as a predictor variable
predM[,c("id")] <- 0
# Use race_eth as predictor for all imputations
predM[,c("race_eth")] <- 1

meth[c("has_retsav", "owns_home")] = "logreg"
```

```{r}
#| label: tbl-imputation-methods
#| tbl-cap: "Imputation-methods vector"

# Imputation methods
knitr::kable(meth)
```

```{r}
#| label: tbl-imput-predictor-matrix
#| tbl-cap: "Imputation predictor matrix"

# Imputation predictors
knitr::kable(predM)
```

```{r}
#| label: impute-pincome-pnetworth
#| output: false

# Income and Wealth imputation
set.seed(25)
imputed = mice(impute, method=meth, predictorMatrix=predM, m=number_of_imputations, maxit=20)

imputed <- complete(imputed, action = "repeated", include = FALSE)

final <- imputed %>%
    rename(id = id.1,
           race_eth = race_eth.1) %>%
    select(-starts_with("id."), -starts_with("race_eth"))

final_long = imputed |>
    pivot_longer(
      cols=everything(), 
      cols_vary = "slowest",
      names_to=c(".value", "imputation"),
      names_pattern = "([[:alpha:]_]+)\\.(\\d)"
      )
  
```

```{r}
# Join back with original income and wealth
og_values <- impute %>%
    select(id, pincome, pnetworth, race_eth, dad_educ_hs)

final <- merge(x=final,y=og_values,
                    by="id", all.x=TRUE)

cols_to_select = colnames(final_long)[!grepl("imputation", colnames(final_long))]

final_long = bind_rows(
    select(impute, cols_to_select) |>
      mutate(imputation='0'),
    final_long
)

income <- final %>%
    select(id, starts_with("pincome"))
wealth <- final %>%
    select(id, starts_with("pnetworth"))

pincome <- tidyr::gather(income, key = "imputation", value ="pincome", matches("pincome"), -id)
pnetworth <- tidyr::gather(wealth, key = "imputation", value ="pnetworth", matches("pnetworth"), -id)

```

## Distribution Plots for Parent Income (non-imputed and imputed)

```{r}
#| label: fig-pincome-imputed
#| fig-cap: "Distribution of parental income, original and imputed"

final_long |>
    ggplot(aes(x=pincome, color=imputation)) + 
        geom_density()

```

```{r}
#| label: fig-pincome-imputed-by-race
#| fig-cap: "Distribution of parental income by race, original and imputed"

final_long |>
    filter(race_eth %in% c("Black Hispanic", "Black NonHispanic", "White Hispanic", "White NonHispanic")) |>
    ggplot(aes(x=pincome, color=imputation)) + 
        geom_density() +
        facet_wrap(~race_eth)

```

## Distribution Plots for Parent Wealth (non-imputed and imputed)

```{r}
#| label: fig-pnetworth-imputed
#| fig-cap: "Distribution of parental net worth, original and imputed"

final_long |>
    ggplot(aes(x=pnetworth, color=imputation)) + 
        geom_density(alpha=.5)

```

```{r}
#| label: fig-pnetworth-imputed-by-race
#| fig-cap: "Distribution of parental net worth by race, original and imputed"

final_long |>
    filter(race_eth %in% c("Black Hispanic", "Black NonHispanic", "White Hispanic", "White NonHispanic")) |>
    ggplot(aes(x=pnetworth, color=imputation)) + 
        geom_density(alpha=.5) +
        facet_wrap(~race_eth)

```

## Distribution Plots for Dad Education (non-imputed and imputed)

```{r}
#| label: tbl-dad-educ-missing
#| tbl-cap: "Total number of observations and number of missing values of father's education by race and ethnicity"

dad_ed_miss = final_long |>
    filter(imputation=="0") |>
    mutate(dad_ed_miss=is.na(dad_educ_hs)) |>
    group_by(race_eth) |>
    summarize(
        N=n(),
        dad_educ_miss = sum(dad_ed_miss)
    )

knitr::kable(dad_ed_miss)
```

```{r}
#| label: fig-dad-educ-shares
#| fig-cap: "Shares of father's educational attainment for the original and imputed data"

final_long |>
    filter(!is.na(dad_educ_hs)) |>
    group_by(imputation) |>
    mutate(N=n()) |>
    group_by(dad_educ_hs, imputation) |>
    summarise(N=max(N), share=n()/N) |>
    ggplot() +
    geom_col(
        aes(y=share, x=imputation, fill=dad_educ_hs), 
        position = position_stack(reverse = TRUE)
    )
```

```{r}
#| label: fig-dad-educ-shares-by-race
#| fig-cap: "Shares of father's educational attainment for the original and imputed data by race and ethnicity"

final_long |>
    filter(!is.na(dad_educ_hs)) |>
    group_by(race_eth, imputation) |>
    mutate(N=n()) |>
    group_by(dad_educ_hs, race_eth, imputation) |>
    summarise(N=max(N), share=n()/N) |>
    ggplot() +
    geom_col(
        aes(y=share, x=imputation, fill=dad_educ_hs),
        position = position_stack(reverse = TRUE)
        ) +
    facet_wrap(~race_eth, nrow=2)

```

## Whisker Plots

```{r}
boxplot(pincome$pincome ~ pincome$imputation)
boxplot(pnetworth$pnetworth ~ pnetworth$imputation)
```

## Scatter Plots for both parent income and wealth (non-imputed is zero)

```{r}
#| label: fig-scatter-pincome-pnetworth
#| fig-cap: "Scatterplots of parental income and networth, original and imputed"

ggplot(final_long, aes(x=pincome, y=pnetworth, color = imputation)) +
    geom_point(alpha = 0.5) +
    facet_wrap(~imputation, scales="free")

```

# Imputation of Retirement Savings

```{r}
#| label: impute-retsav-init
#| output: false

number_of_imputations = 5

first_stage_imp = '1'

# We take one of the imputed sets and add retsav onto it
rs_impute = final_long |>
    filter(imputation==first_stage_imp) |>
    select(-imputation) |>
    left_join(select(test, id, retsav), by="id") |>
    mutate(retsav = if_else(has_retsav==0, 0, retsav))

rs_no_retsav = rs_impute |>
  filter(has_retsav==0)

# First strategy: use only the subset of those who has_retsav==1 for imputation
rs_impute <- rs_impute |>
  filter(has_retsav==1)

init = mice(rs_impute, maxit=0)
meth = init$method
predM = init$predictorMatrix

# Assign Variables to be imputed
# Don't use id as a predictor variable
predM[,c("id")] <- 0
# Use race_eth as predictor for all imputations
predM[,c("race_eth")] <- 1


# Imputation of retirement savings
set.seed(25)
rs_imputed = mice(rs_impute, method=meth, predictorMatrix=predM, m=number_of_imputations, maxit=20)

rs_imputed <- complete(rs_imputed, action = "repeated", include = FALSE)

rs_final_long = rs_imputed |>
    pivot_longer(
      cols=everything(), 
      cols_vary = "slowest",
      names_to=c(".value", "imputation"),
      names_pattern = "([[:alpha:]_]+)\\.(\\d)"
      )

cols_to_select = colnames(rs_final_long)[!grepl("imputation", colnames(rs_final_long))]

rs_final_long = bind_rows(
    select(rs_impute, cols_to_select) |>
      mutate(imputation='0'),
    rs_final_long
)

```

```{r}
#| label: tbl-imputation-methods-retsav
#| tbl-cap: "Methods vector for the imputation of retirement savings"

# Imputation methods
knitr::kable(meth)
```

```{r}
#| label: tbl-imput-predictor-matrix-retsav
#| tbl-cap: "Predictor matrix for the imputation of retirement savings"

# Imputation predictors
knitr::kable(predM)
```

## Distribution Plots for Retirement Savings (non-imputed and imputed)

```{r}
#| label: fig-retsav-imputed
#| fig-cap: "Distribution of parental retirement savings, original and imputed"

rs_final_long |>
    ggplot(aes(x=retsav, color=imputation)) + 
        geom_density()

```

```{r}
#| label: fig-retsav-imputed-by-race
#| fig-cap: "Distribution of parental retirement savings by race, original and imputed"

rs_final_long |>
    filter(race_eth %in% c("Black Hispanic", "Black NonHispanic", "White Hispanic", "White NonHispanic")) |>
    ggplot(aes(x=retsav, color=imputation)) + 
        geom_density() +
        facet_wrap(~race_eth)

```

```{r}
#| label: fig-scatter-retsav-pnetworth
#| fig-cap: "Scatterplots of parental retirement savings and networth, original and imputed"

ggplot(rs_final_long, aes(x=retsav, y=pnetworth, color = imputation)) +
    geom_point(alpha = 0.5) +
    facet_wrap(~imputation, scales="free")

```

```{r}
#| label: save-results

save_df = bind_rows(
  filter(rs_final_long, imputation=='1') |> select(-imputation),
  rs_no_retsav
) |>
    rename_with(~gsub("_hs", "", .), ends_with("educ_hs"))

# We don't save race_eth and both_parents because they were not imputed and we
# will use different race encoding in teh estimation
readr::write_csv(
      select(save_df, -race_eth, -both_parents),
      nlsy_imp_file
      )

```

```{r}
#| label: fig-scatter-pnetworth2
#| fig-cap: "Scatter plot of parental networth and networth without retirement savings"

plotdf = save_df |>
    mutate(pnetworth2 = pnetworth-retsav)

plotdf |>
  ggplot(aes(x=pnetworth, y=pnetworth2)) +
  geom_point(size=.25)

```

```{r}
#| label: fig-density-pnetworth2
#| fig-cap: "Distribution of parental networth and networth without retirement savings"

plotdf |> select(pnetworth1=pnetworth, pnetworth2) |>
  pivot_longer(everything(), names_prefix = "pnetworth", names_to="name", values_to="value") |>
  ggplot() +
  geom_density(aes(x=value, color=name))

```

```{r}
#| label: fig-density-pnetworth2-by_race
#| fig-cap: "Distribution of parental networth and networth without retirement savings by race"


plotdf |> select(race_eth, pnetworth1=pnetworth, pnetworth2) |>
  pivot_longer(-race_eth, names_prefix = "pnetworth", names_to="name", values_to="value") |>
  ggplot() +
  geom_density(aes(x=value, color=name)) +
  facet_wrap(~race_eth)
```
